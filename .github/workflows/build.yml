name: Build
on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - "v*.*.*"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      with:
        fetch-depth: 0

    - name: Install .NET SDK
      uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4
      with:
        global-json-file: global.json

    - name: Restore
      run: dotnet restore
      
    - name: Restore tools
      run: dotnet tool restore

    - name: Find version number
      id: version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]
        then
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT;
        else
          echo "VERSION=0.0.0-alpha.${{ github.run_number }}" >> $GITHUB_OUTPUT;
        fi

    - name: Lint - format
      run: dotnet format --no-restore --verify-no-changes

    - name: Lint - csharpier
      run: dotnet csharpier . --check
      
    - name: Build
      run: dotnet build --configuration Release -p:Version=${{ steps.version.outputs.VERSION }}

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test-results.trx"

    - name: Test Report
      uses: phoenix-actions/test-reporting@41efe7ebebe7ef156ef46f6b0acf50ec0f10315b # v12
      if: always()
      with:
        name: Test results (${{ matrix.os }})
        path: "**/*.trx"
        reporter: dotnet-trx
        output-to: 'step-summary'
        fail-on-error: false

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        files: "**/coverage.cobertura.xml"

    - name: Pack
      run: dotnet pack --no-build --configuration Release -p:Version=${{ steps.version.outputs.VERSION }}

    - name: Test - Package
      shell: bash
      run: ./build/tool-test.sh

    - name: Upload NuGet artifact
      uses: actions/upload-artifact@1eb3cb2b3e0f29609092a73eb033bb759a334595 # v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: nuget
        path: src/DotnetSops.CommandLine/bin/nupkg/*.*
        if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download NuGet artifact
      uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4
      with:
        name: nuget

    - name: Create release
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        generate_release_notes: true
        fail_on_unmatched_files: true
        prerelease: ${{ contains(github.ref, '-') }}
        files: |
          *.nupkg
          *.snupkg
