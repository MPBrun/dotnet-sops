<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecryptCommandDescription" xml:space="preserve">
    <value>Decrypt secrets into .NET User Secrets</value>
  </data>
  <data name="DecryptCommandFileOptionDescription" xml:space="preserve">
    <value>Encrypted secrets file</value>
  </data>
  <data name="DecryptCommandProjectOptionDescription" xml:space="preserve">
    <value>Path to the project. Defaults to searching the current directory.</value>
  </data>
  <data name="DecryptCommandSecretsIdOptionDescription" xml:space="preserve">
    <value>The user secret ID to use.</value>
  </data>
  <data name="DecryptCommandSuccess" xml:space="preserve">
    <value>'{0}' successfully decrypted to user secret with ID '{1}'.</value>
    <comment>{0} is file path
{1} is id</comment>
  </data>
  <data name="DownloadSopsCommandDescription" xml:space="preserve">
    <value>Download SOPS from https://github.com/getsops/sops</value>
  </data>
  <data name="DownloadSopsCommandInformation" xml:space="preserve">
    <value>Downloading [yellow]SOPS[/] from [link]https://github.com/getsops/sops[/]</value>
  </data>
  <data name="DownloadSopsCommandSuccess" xml:space="preserve">
    <value>SOPS has been successfully downloaded.</value>
  </data>
  <data name="DownloadSopsLoader" xml:space="preserve">
    <value>Downloading SOPS</value>
  </data>
  <data name="EncryptCommandDescription" xml:space="preserve">
    <value>Encrypt existing .NET User Secrets</value>
  </data>
  <data name="EncryptCommandFileOptionDescription" xml:space="preserve">
    <value>Encrypted secrets file.</value>
  </data>
  <data name="EncryptCommandProjectOptionDescription" xml:space="preserve">
    <value>Path to the project. Defaults to searching the current directory.</value>
  </data>
  <data name="EncryptCommandSecretsIdOptionDescription" xml:space="preserve">
    <value>The user secret ID to use.</value>
  </data>
  <data name="EncryptCommandSuccess" xml:space="preserve">
    <value>User secret with ID '{0}' successfully encrypted to '{1}'.</value>
    <comment>{0} is id
{1} is file path</comment>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' does not exist.</value>
    <comment>{0} is file path</comment>
  </data>
  <data name="InitializeCommandAgePublicKeyQuestion" xml:space="preserve">
    <value>What is the public key of age?</value>
  </data>
  <data name="InitializeCommandAwsKmsFormat" xml:space="preserve">
    <value>An ARN has following format: arn:partition:service:region:account-id:resource-type/resource-id</value>
  </data>
  <data name="InitializeCommandAwsKmsQuestion" xml:space="preserve">
    <value>What is the ARN of the key?</value>
  </data>
  <data name="InitializeCommandAzureKeyIdentifierQuestion" xml:space="preserve">
    <value>What is the key identifier of the key?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultFormat" xml:space="preserve">
    <value>An Azure Vault key is defined by 3 parts of the key identifier: https://{vault-name}.vault.azure.net/keys/{object-name}/{object-version}</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultIdentifierFormat" xml:space="preserve">
    <value>A key identifier has following format: https://{vault-name}.vault.azure.net/keys/{object-name}/{object-version}</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultKeyQuestion" xml:space="preserve">
    <value>What is the object name of the key?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultNameQuestion" xml:space="preserve">
    <value>What is the name of the Key Vault?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultVersionQuestion" xml:space="preserve">
    <value>What is the object version of the key?</value>
  </data>
  <data name="InitializeCommandConfigAlreadyExistQuestion" xml:space="preserve">
    <value>Are you sure you want to overwrite the existing [yellow].sops.yaml[/]?</value>
  </data>
  <data name="InitializeCommandDescription" xml:space="preserve">
    <value>Create a .sops.yaml configuration file.</value>
  </data>
  <data name="InitializeCommandGcpKmsFormat" xml:space="preserve">
    <value>The resource ID has the following format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY_NAME</value>
  </data>
  <data name="InitializeCommandGcpKmsQuestion" xml:space="preserve">
    <value>What is the resource ID of the key?</value>
  </data>
  <data name="InitializeCommandHashicorpVaultQuestion" xml:space="preserve">
    <value>What is the URI of the vault key?</value>
  </data>
  <data name="InitializeCommandKeyInformation" xml:space="preserve">
    <value>[yellow]Keys:[/]
  SOPS supports different keys. You can refer to their respective documentation on how to create a key that supports encryption and decryption.

[yellow]Documentation:[/]
  [yellow]Azure Key Vault[/] - https://learn.microsoft.com/en-us/azure/key-vault
  [yellow]AWS KMS[/] - https://aws.amazon.com/kms
  [yellow]GCP KMS[/] - https://cloud.google.com/security-key-management
  [yellow]Hashicorp Vault[/] - https://www.vaultproject.io
  [yellow]age[/] - https://github.com/FiloSottile/age
  [yellow]PGP[/] - https://www.openpgp.org

[yellow]Key groups:[/]
  SOPS can be used to encrypt data under multiple keys, so that if any of the keys are available, the data can be decrypted. 
  
  However, SOPS also supports "key groups", which require access to multiple keys in order to decrypt.
</value>
  </data>
  <data name="InitializeCommandKeyTypeQuestion" xml:space="preserve">
    <value>Which key type would you like to use?</value>
  </data>
  <data name="InitializeCommandMoreKeyGroupsQuestion" xml:space="preserve">
    <value>Add more key groups?</value>
  </data>
  <data name="InitializeCommandMoreKeysQuestion" xml:space="preserve">
    <value>Add more keys?</value>
  </data>
  <data name="InitializeCommandMoreKeysToKeyGroupQuestion" xml:space="preserve">
    <value>Add more keys to the group?</value>
  </data>
  <data name="InitializeCommandPgpPublicKeyQuestion" xml:space="preserve">
    <value>What is the public key of PGP?</value>
  </data>
  <data name="InitializeCommandSuccessGenerated" xml:space="preserve">
    <value>[green]Generated .sops.yaml with the following content:[/]</value>
  </data>
  <data name="InitializeCommandSuccessSuggestion" xml:space="preserve">
    <value>You can now encrypt your .NET User Secrets by running:
  [yellow]dotnet sops encrypt[/]</value>
  </data>
  <data name="InitializeCommandUseKeyGroupsQuestion" xml:space="preserve">
    <value>Use key groups?</value>
  </data>
  <data name="KeyTypeAge" xml:space="preserve">
    <value>age</value>
  </data>
  <data name="KeyTypeAwsKms" xml:space="preserve">
    <value>AWS KMS</value>
  </data>
  <data name="KeyTypeAzureKeyVault" xml:space="preserve">
    <value>Azure Key Vault</value>
  </data>
  <data name="KeyTypeGcpKms" xml:space="preserve">
    <value>GCP KMS</value>
  </data>
  <data name="KeyTypeHashicorpVault" xml:space="preserve">
    <value>Hashicorp Vault</value>
  </data>
  <data name="KeyTypePgp" xml:space="preserve">
    <value>PGP</value>
  </data>
  <data name="OperatingSystemNotSupported" xml:space="preserve">
    <value>This operating system is not supported.</value>
  </data>
  <data name="ProjectInfoServiceMultipleFoundError" xml:space="preserve">
    <value>Multiple MSBuild project files found in '{0}'.</value>
    <comment>{0} is the current directory</comment>
  </data>
  <data name="ProjectInfoServiceMultipleFoundSuggestion" xml:space="preserve">
    <value>Specify which project to use with the [yellow]'--project'[/] option.</value>
  </data>
  <data name="ProjectInfoServiceNotFoundError" xml:space="preserve">
    <value>Could not find a MSBuild project file in '{0}'.</value>
    <comment>{0} is the current directory</comment>
  </data>
  <data name="ProjectInfoServiceNotFoundSuggestion" xml:space="preserve">
    <value>Specify which project to use with the [yellow]'--project'[/] option or use the [yellow]'--id'[/] option.</value>
  </data>
  <data name="ProjectInfoServiceNotLoadableError" xml:space="preserve">
    <value>Could not load the MSBuild project '{0}'.</value>
    <comment>{0} is the project path</comment>
  </data>
  <data name="ProjectInfoServiceUserSecretIdNotFoundError" xml:space="preserve">
    <value>Could not find the global property 'UserSecretsId' in MSBuild project '{0}'.</value>
    <comment>{0} is the project path</comment>
  </data>
  <data name="ProjectInfoServiceUserSecretIdNotFoundSuggestion" xml:space="preserve">
    <value>Ensure this property is set in the project or use the [yellow]'--id'[/] command-line option.

The 'UserSecretsId' property can be created by running this command:
  [yellow]dotnet user-secrets init[/]</value>
  </data>
  <data name="RootCommandDescription" xml:space="preserve">
    <value>Encrypt and share secrets with the user-secrets tool, utilizing SOPS for encryption and decryption. Encrypted secrets can be shared with other team members who can decrypt them if they have access.

Key types are configured using the .sops.yaml file. Run 'dotnet sops init' for a helpful wizard to create the .sops.yaml.</value>
  </data>
  <data name="RootDotnetSopsCommandVerboseOptionDescription" xml:space="preserve">
    <value>Enable verbose logging output</value>
  </data>
  <data name="RunCommandArgumentsDescription" xml:space="preserve">
    <value>Arguments passed to the 'dotnet run' command.</value>
  </data>
  <data name="RunCommandDescription" xml:space="preserve">
    <value>Execute 'dotnet run' with decrypted secrets inserted into the environment</value>
  </data>
  <data name="RunCommandFileOptionDescription" xml:space="preserve">
    <value>Encrypted secrets file</value>
  </data>
  <data name="SopsDownloadHttpFailed" xml:space="preserve">
    <value>Failed to download SOPS.

HTTP status code: {0}
URL: {1}</value>
    <comment>{0} is status code
{1} is url</comment>
  </data>
  <data name="SopsDownloadSha512Failed" xml:space="preserve">
    <value>SHA512 of SOPS executable did not match.

Expected: {0}
Actual:   {1}</value>
    <comment>{0} is expected
{1} is actual</comment>
  </data>
  <data name="SopsIsMissing" xml:space="preserve">
    <value>SOPS executable could not be found on the PATH.</value>
  </data>
  <data name="SopsIsMissingSuggestion" xml:space="preserve">
    <value>You can download it by executing the following command:
  [yellow]dotnet sops download-sops[/]</value>
  </data>
  <data name="SopsRunFailed" xml:space="preserve">
    <value>Failed to run sops.</value>
  </data>
  <data name="SopsRunFailedWithError" xml:space="preserve">
    <value>Executing SOPS failed.</value>
  </data>
  <data name="UserSecretsFileDoesNotExist" xml:space="preserve">
    <value>User secrets file '{0}' does not exist.</value>
    <comment>{0} is file path</comment>
  </data>
  <data name="UserSecretsFileDoesNotExistSuggestion" xml:space="preserve">
    <value>You have no secrets created. You can add secrets by running this command:
  [yellow]dotnet user-secrets set [[name]] [[value]][/]</value>
  </data>
</root>