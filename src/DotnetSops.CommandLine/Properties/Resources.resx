<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecryptCommandDescription" xml:space="preserve">
    <value>Decrypt secrets into dotnet user secrets</value>
  </data>
  <data name="DecryptCommandFileOptionDescription" xml:space="preserve">
    <value>File of the encrypted secrets</value>
  </data>
  <data name="DecryptCommandProjectOptionDescription" xml:space="preserve">
    <value>Path to project. Defaults to searching the current directory</value>
  </data>
  <data name="DecryptCommandSecretsIdOptionDescription" xml:space="preserve">
    <value>The user secret ID to use.</value>
  </data>
  <data name="DecryptCommandSuccess" xml:space="preserve">
    <value>'{0}' successfully decrypted to user secret with id '{1}'.</value>
    <comment>{0} is file path
{1} is id</comment>
  </data>
  <data name="DownloadSopsCommandDescription" xml:space="preserve">
    <value>Download SOPS from https://github.com/getsops/sops</value>
  </data>
  <data name="DownloadSopsCommandInformation" xml:space="preserve">
    <value>Downloading [yellow]SOPS[/] from [link]https://github.com/getsops/sops[/]</value>
  </data>
  <data name="DownloadSopsCommandSuccess" xml:space="preserve">
    <value>SOPS has been successfully downloaded.</value>
  </data>
  <data name="DownloadSopsLoader" xml:space="preserve">
    <value>Downloading SOPS</value>
  </data>
  <data name="EncryptCommandDescription" xml:space="preserve">
    <value>Encrypt existing dotnet user secrets</value>
  </data>
  <data name="EncryptCommandFileOptionDescription" xml:space="preserve">
    <value>File of the encrypted secrets</value>
  </data>
  <data name="EncryptCommandProjectOptionDescription" xml:space="preserve">
    <value>Path to project. Defaults to searching the current directory</value>
  </data>
  <data name="EncryptCommandSecretsIdOptionDescription" xml:space="preserve">
    <value>The user secret ID to use.</value>
  </data>
  <data name="EncryptCommandSuccess" xml:space="preserve">
    <value>User secret with id '{0}' successfully encrypted to '{1}'.</value>
    <comment>{0} is id
{1} is file path</comment>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' does not exist.</value>
    <comment>{0} is file path</comment>
  </data>
  <data name="InitializeCommandAgePublicKeyQuestion" xml:space="preserve">
    <value>What is public key of age?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultKeyQuestion" xml:space="preserve">
    <value>What is object name of the key?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultNameQuestion" xml:space="preserve">
    <value>What is the name of the key vault?</value>
  </data>
  <data name="InitializeCommandAzureKeyVaultVersionQuestion" xml:space="preserve">
    <value>What is object version of the key?</value>
  </data>
  <data name="InitializeCommandConfigAlreadyExistQuestion" xml:space="preserve">
    <value>Are you sure to overwrite existing [yellow].sops.yaml[/]?</value>
  </data>
  <data name="InitializeCommandDescription" xml:space="preserve">
    <value>Create .sops.yaml configuration file.</value>
  </data>
  <data name="InitializeCommandEncryptionQuestion" xml:space="preserve">
    <value>Which encryption whould you like to use?</value>
  </data>
  <data name="InitializeCommandPgpPublicKeyQuestion" xml:space="preserve">
    <value>What is public key of PGP?</value>
  </data>
  <data name="InitializeCommandSuccessGenerated" xml:space="preserve">
    <value>[green]Generated .sops.yaml with the following content:[/]</value>
  </data>
  <data name="InitializeCommandSuccessSuggestion" xml:space="preserve">
    <value>You can now encrypt your dotnet user secrets by running:
  [yellow]dotnet sops encrypt[/]</value>
  </data>
  <data name="OperatingSystemNotSupported" xml:space="preserve">
    <value>Operating system is not supported.</value>
  </data>
  <data name="ProjectInfoServiceMultipleFoundError" xml:space="preserve">
    <value>Multiple MSBuild project files found in '{0}'.</value>
    <comment>{0} is the current directory</comment>
  </data>
  <data name="ProjectInfoServiceMultipleFoundSuggestion" xml:space="preserve">
    <value>Specify which project to use with the [yellow]'--project'[/] option.</value>
  </data>
  <data name="ProjectInfoServiceNotFoundError" xml:space="preserve">
    <value>Could not find a MSBuild project file in '{0}'.</value>
    <comment>{0} is the current directory</comment>
  </data>
  <data name="ProjectInfoServiceNotFoundSuggestion" xml:space="preserve">
    <value>Specify which project to use with the [yellow]'--project'[/] option or use the [yellow]'--id'[/] option.</value>
  </data>
  <data name="ProjectInfoServiceNotLoadableError" xml:space="preserve">
    <value>Could not load the MSBuild project '{0}'.</value>
    <comment>{0} is the project path</comment>
  </data>
  <data name="ProjectInfoServiceUserSecretIdNotFoundError" xml:space="preserve">
    <value>Could not find the global property 'UserSecretsId' in MSBuild project '{0}'.</value>
    <comment>{0} is the project path</comment>
  </data>
  <data name="ProjectInfoServiceUserSecretIdNotFoundSuggestion" xml:space="preserve">
    <value>Ensure this property is set in the project or use the [yellow]'--id'[/] command line option.

The 'UserSecretsId' property can be created by running this command:
  [yellow]dotnet user-secrets init[/]</value>
  </data>
  <data name="RootCommandDescription" xml:space="preserve">
    <value>Store and share encrypted secrets, created using user-secrets tool.
Secrets are encrypted and decrypted using SOPS.
Encrypted secrets can shared with other team members than can decrypt it, if they have access.

Encryption types is configured using .sops.yaml file. Run "dotnet sops init" for help wizard to create .sops.yaml.

Warning: When secrets are decrypted they are stored in plain, unencrypted text, that can be loaded by user-secrets tool.
Recomendation: Only store development secrets that cannot access production like environment.</value>
  </data>
  <data name="RootDotnetSopsCommandVerboseOptionDescription" xml:space="preserve">
    <value>Enable verbose logging output</value>
  </data>
  <data name="SopsDownloadHttpFailed" xml:space="preserve">
    <value>Failed to download SOPS.

HTTP status code: {0}
URL: {1}</value>
    <comment>{0} is status code
{1} is url</comment>
  </data>
  <data name="SopsDownloadSha512Failed" xml:space="preserve">
    <value>SHA512 of SOPS executable did not match.

Expected: {0}
Actual:   {1}</value>
    <comment>{0} is expected
{1} is actual</comment>
  </data>
  <data name="SopsIsMissing" xml:space="preserve">
    <value>SOPS executable could not be found on the PATH.</value>
  </data>
  <data name="SopsIsMissingSuggestion" xml:space="preserve">
    <value>You can download it by executing the following command:
  [yellow]dotnet sops download-sops[/]</value>
  </data>
  <data name="SopsRunFailed" xml:space="preserve">
    <value>Failed to run sops.</value>
  </data>
  <data name="SopsRunFailedWithError" xml:space="preserve">
    <value>SOPS failed with error:

{0}</value>
    <comment>{0} is error output</comment>
  </data>
  <data name="UserSecretsFileDoesNotExist" xml:space="preserve">
    <value>User secrets file '{0}' does not exist.</value>
    <comment>{0} is file path</comment>
  </data>
  <data name="UserSecretsFileDoesNotExistSuggestion" xml:space="preserve">
    <value>You have no secrets created. You can add secrets by running this command:
  [yellow]dotnet user-secrets set [[name]] [[value]][/]</value>
  </data>
</root>